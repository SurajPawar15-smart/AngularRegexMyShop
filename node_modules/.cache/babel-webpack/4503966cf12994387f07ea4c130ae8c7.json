{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\"; // import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n// /**\n//  *\n//  * @param form\n//  */\n//  function passwordsMatchValidator(form:any) {\n//   const password = form.get('password')\n//   const confirmPassword = form.get('confirmPassword')\n//   if(password.value !== confirmPassword.value) {\n//     confirmPassword.setErrors({ passwordsMatch: true })\n//   } else {\n//     confirmPassword.setErrors(null)\n//   }\n//   return null\n// }\n// /**\n//  * If the data is valid return null else return an object\n//  */\n// function symbolValidator(control:any) { //control = registerForm.get('password')\n//   if(control.hasError('required')) return null;\n//   if(control.hasError('minlength')) return null;\n//   if(control.value.indexOf('@') > -1) {\n//     return null\n//   } else {\n//     return { symbol: true }\n//   }\n// }\n\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    //registerForm?: FormGroup;\n    constructor() {}\n\n    ngOnInit() {//this.buildForm()\n    }\n\n  }\n\n  RegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)();\n  };\n\n  RegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 48,\n    vars: 0,\n    consts: [[1, \"row\"], [1, \"col-md-4\", \"offset-md-4\"], [1, \"guest-form-card\", \"card\"], [1, \"card-header\", \"text-center\"], [1, \"card-body\"], [1, \"form-group\"], [\"for\", \"name\"], [\"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [1, \"invalid-feedback\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"username\"], [\"id\", \"username\", \"formControlName\", \"username\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"confirmPassword\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"formControlName\", \"confirmPassword\", 1, \"form-control\"], [1, \"btn\", \"btn-primary\", \"btn-block\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"h2\");\n        i0.ɵɵtext(5, \"Register Here\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"form\");\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"label\", 6);\n        i0.ɵɵtext(10, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 7);\n        i0.ɵɵelementStart(12, \"span\", 8);\n        i0.ɵɵtext(13, \"Name can't be blank.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 5);\n        i0.ɵɵelementStart(15, \"label\", 9);\n        i0.ɵɵtext(16, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 10);\n        i0.ɵɵelementStart(18, \"span\", 8);\n        i0.ɵɵelementStart(19, \"span\");\n        i0.ɵɵtext(20, \"Email can't be blank.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"span\");\n        i0.ɵɵtext(22, \"Email must be valid.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 5);\n        i0.ɵɵelementStart(24, \"label\", 11);\n        i0.ɵɵtext(25, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"input\", 12);\n        i0.ɵɵelementStart(27, \"span\", 8);\n        i0.ɵɵtext(28, \"Username can't be blank.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"div\", 5);\n        i0.ɵɵelementStart(30, \"label\", 13);\n        i0.ɵɵtext(31, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(32, \"input\", 14);\n        i0.ɵɵelementStart(33, \"span\", 8);\n        i0.ɵɵelementStart(34, \"span\");\n        i0.ɵɵtext(35, \"Password can't be blank.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"span\");\n        i0.ɵɵtext(37, \"Password must contain @\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"span\");\n        i0.ɵɵtext(39, \"Password must contain minimum 4 characters\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"div\", 5);\n        i0.ɵɵelementStart(41, \"label\", 15);\n        i0.ɵɵtext(42, \"Confirm Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(43, \"input\", 16);\n        i0.ɵɵelementStart(44, \"span\", 8);\n        i0.ɵɵtext(45, \"Passwords must match.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"button\", 17);\n        i0.ɵɵtext(47, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.NgForm, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName],\n    styles: [\"\"]\n  });\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}